from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.config import BOT_TOKEN
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from aiogram import F
from aiogram.filters.command import Command
import asyncio
from database.method_database import MetodSQL
from bot.routers import dp
from bot.handlers.routers.router_start import router
import config.config as config
from pytz import UTC


bot = Bot(token=BOT_TOKEN)
scheduler = AsyncIOScheduler()


register_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
])

global webtime

@router.message(Command("start"))
async def on_start(message: types.Message):
    global webtime
    webtim = config.WEBINAR_TIME_KYIV
    webtime = webtim.astimezone(UTC)
    is_registered = await MetodSQL.is_user_registered(message.from_user.id)
    if is_registered:
        text = (
            "–ü—Ä–∏–≤–µ—Ç! üëã\n"
            "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞) –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ:\n\n"
            "üìÖ –ù–∞ –≤–µ–±–∏–Ω–∞—Ä–µ ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω—É —Å –ò–ò¬ª —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
            f"üïí –í–µ–±–∏–Ω–∞—Ä –ø—Ä–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è:\n"
            f"{config.WEBINAR_TIME_KYIV.strftime('%d.%m.%Y –≤ %H:%M')} –í–∞—Ä—à–∞–≤–∞ | "
            f"{(config.WEBINAR_TIME_KYIV + timedelta(hours=1)).strftime('%H:%M')} –ö–∏–µ–≤.\n\n"
            "üîß –ù–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π —Ç–µ–æ—Ä–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ–≥—É—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã. –¢—ã —É–∑–Ω–∞–µ—à—å:\n\n"
            "‚úÖ –ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚úÖ –ö–∞–∫–∏–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–±–æ—Ç–µ –∏ –∂–∏–∑–Ω–∏\n"
            "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –≤ —Å–≤–æ–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö\n\n"
            "–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä–µ! üî•"
        )
        await message.answer(text)
        return

    welcome_text = (
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–ù–∞ –≤–µ–±–∏–Ω–∞—Ä–µ ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω—É —Å –ò–ò¬ª —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
        f"–í–µ–±–∏–Ω–∞—Ä –ø—Ä–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è:\n"
        f"{config.WEBINAR_TIME_KYIV.strftime('%d.%m.%Y –≤ %H:%M')} –í–∞—Ä—à–∞–≤–∞ | "
        f"{(config.WEBINAR_TIME_KYIV + timedelta(hours=1)).strftime('%H:%M')} –ö–∏–µ–≤.\n\n"
        "–ù–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π —Ç–µ–æ—Ä–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ–≥—É—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã. –í—ã —É–∑–Ω–∞–µ—Ç–µ:\n\n"
        "‚úÖ –ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
        "‚úÖ –ö–∞–∫–∏–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–±–æ—Ç–µ –∏ –∂–∏–∑–Ω–∏\n"
        "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –≤ —Å–≤–æ–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ üéÅ ‚Äî 30-–º–∏–Ω—É—Ç–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫:\n"
        "¬´–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —é—Ä–∏—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò¬ª"
    )
    await message.answer(welcome_text, reply_markup=register_kb)


@router.callback_query(F.data == "register")
async def on_register(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    at = datetime.now(timezone.utc)

    await MetodSQL.add(user_id, username, at=at)

    await schedule_reminders(user_id)

    await callback_query.message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä! –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –Ω–∞—á–∞–ª–µ.")
    await callback_query.answer()


from datetime import datetime, timedelta, timezone

async def schedule_reminders(user_id: int):
    global webtime

    now = datetime.now(timezone.utc)

    WEBINAR_TIME = webtime

    reminder_30min = WEBINAR_TIME - timedelta(minutes=30)
    reminder_30min = reminder_30min.replace(tzinfo=timezone.utc)
    if reminder_30min > now:
        scheduler.add_job(
            send_reminder,
            DateTrigger(reminder_30min),
            args=(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –≤–µ–±–∏–Ω–∞—Ä ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω—É —Å –ò–ò¬ª!"),
        )

    reminder_5min = WEBINAR_TIME - timedelta(minutes=5)
    reminder_5min = reminder_5min.replace(tzinfo=timezone.utc)

    if reminder_5min > now:
        scheduler.add_job(
            send_reminder,
            DateTrigger(reminder_5min),
            args=(user_id, "üîî –í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!"),
        )

    WEBINAR_TIME = WEBINAR_TIME.replace(tzinfo=timezone.utc)
    if WEBINAR_TIME > now:
        scheduler.add_job(
            send_reminder,
            DateTrigger(WEBINAR_TIME),
            args=(user_id, "üöÄ –í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!"),
        )

    reminder_90min_after = WEBINAR_TIME + timedelta(minutes=90)
    reminder_90min_after = reminder_90min_after.replace(tzinfo=timezone.utc)
    if reminder_90min_after > now:
        scheduler.add_job(
            send_reminder,
            DateTrigger(reminder_90min_after),
            args=(user_id, "üìö –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≤–µ–±–∏–Ω–∞—Ä–µ! –í–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–ø–∏—Å—å..."),
        )

async def send_reminder(user_id: int, message: str):
    try:
        await bot.send_message(user_id, message)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def on_startup():
    scheduler.start()

    users = await MetodSQL.get_all_users()
    for user in users:
        await schedule_reminders(user['user_id'])


async def main_context():
    await on_startup()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main_context())
























































# from aiogram import Bot, types
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from config.config import BOT_TOKEN, WEBINAR_TIME
# from apscheduler.schedulers.asyncio import AsyncIOScheduler
# from apscheduler.triggers.date import DateTrigger
# from aiogram import F
# from aiogram.filters.command import Command, Message
# import asyncio
# from database.method_database import MetodSQL
# from bot.routers import dp
# from bot.handlers.routers.router_start import router
# import config.config as config
# import pytz
#
#
# bot = Bot(token=BOT_TOKEN)
# scheduler = AsyncIOScheduler()
#
#
# register_kb = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
# ])
#
#
# @router.message(Command("start"))
# async def on_start(message: types.Message):
#     welcome_text = (
#         "–ü—Ä–∏–≤–µ—Ç! üëã\n"
#         "–ù–∞ –≤–µ–±–∏–Ω–∞—Ä–µ ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω—É —Å –ò–ò¬ª —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
#         f"–í–µ–±–∏–Ω–∞—Ä –ø—Ä–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è:\n"
#         f"{config.WEBINAR_TIME.strftime('%d.%m.%Y –≤ %H:%M')} –í–∞—Ä—à–∞–≤–∞ | "
#         f"{(config.WEBINAR_TIME + timedelta(hours=1)).strftime('%H:%M')} –ö–∏–µ–≤.\n\n"
#         "–ù–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π —Ç–µ–æ—Ä–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ–≥—É—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã. –í—ã —É–∑–Ω–∞–µ—Ç–µ:\n\n"
#         "‚úÖ –ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
#         "‚úÖ –ö–∞–∫–∏–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–±–æ—Ç–µ –∏ –∂–∏–∑–Ω–∏\n"
#         "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –≤ —Å–≤–æ–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö\n\n"
#         "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ üéÅ ‚Äî 30-–º–∏–Ω—É—Ç–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫:\n"
#         "¬´–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —é—Ä–∏—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò¬ª"
#     )
#     await message.answer(welcome_text, reply_markup=register_kb)
#
# @router.callback_query(F.data == "register")
# async def on_register(callback_query: types.CallbackQuery):
#     user_id = callback_query.from_user.id
#     username = callback_query.from_user.username
#     at = datetime.now(timezone.utc)
#
#     await MetodSQL.add(user_id, username, at=at)
#
#     await schedule_reminders(user_id)
#
#     await callback_query.message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä! –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –Ω–∞—á–∞–ª–µ.")
#     await callback_query.answer()
#
#
# from datetime import datetime, timedelta, timezone
#
# async def schedule_reminders(user_id: int):
#     now = datetime.now(timezone.utc)
#     from config.config import WEBINAR_TIME
#
#     reminder_30min = WEBINAR_TIME - timedelta(minutes=30)
#     reminder_30min = reminder_30min.replace(tzinfo=timezone.utc)
#     print(f"rem30 {reminder_30min}")
#     if reminder_30min > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(reminder_30min),
#             args=(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –≤–µ–±–∏–Ω–∞—Ä ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω—É —Å –ò–ò¬ª!"),
#         )
#
#     reminder_5min = WEBINAR_TIME - timedelta(minutes=5)
#     reminder_5min = reminder_5min.replace(tzinfo=timezone.utc)
#     print(f"rem5 {reminder_5min}")
#
#     if reminder_5min > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(reminder_5min),
#             args=(user_id, "üîî –í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!"),
#         )
#
#     WEBINAR_TIME = WEBINAR_TIME.replace(tzinfo=timezone.utc)
#     if WEBINAR_TIME > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(WEBINAR_TIME),
#             args=(user_id, "üöÄ –í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!"),
#         )
#
#     reminder_90min_after = WEBINAR_TIME + timedelta(minutes=90)
#     reminder_90min_after = reminder_90min_after.replace(tzinfo=timezone.utc)
#     if reminder_90min_after > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(reminder_90min_after),
#             args=(user_id, "üìö –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≤–µ–±–∏–Ω–∞—Ä–µ! –í–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–ø–∏—Å—å..."),
#         )
#
# async def send_reminder(user_id: int, message: str):
#     try:
#         await bot.send_message(user_id, message)
#     except Exception as e:
#         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
#
#
# async def on_startup():
#     scheduler.start()
#
#     users = await MetodSQL.get_all_users()
#     for user in users:
#         await schedule_reminders(user['user_id'])
#
#
# async def main_context():
#     await on_startup()
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main_context())


























# from aiogram import Bot, types
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from config.config import BOT_TOKEN, WEBINAR_TIME
# from apscheduler.schedulers.asyncio import AsyncIOScheduler
# from apscheduler.triggers.date import DateTrigger
# from aiogram import F
# from aiogram.filters.command import Command, Message
# import asyncio
# from database.method_database import MetodSQL
# from bot.routers import dp
# from bot.handlers.routers.router_start import router
# import config.config as config
# import pytz
#
#
# bot = Bot(token=BOT_TOKEN)
# scheduler = AsyncIOScheduler()
#
#
# register_kb = InlineKeyboardMarkup(inline_keyboard=[
#     [InlineKeyboardButton(text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register")]
# ])
#
#
# @router.message(Command("start"))
# async def on_start(message: types.Message):
#     welcome_text = (
#         "–ü—Ä–∏–≤–µ—Ç! üëã\n"
#         "–ù–∞ –≤–µ–±–∏–Ω–∞—Ä–µ ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω—É —Å –ò–ò¬ª —è –ø–æ–∫–∞–∂—É, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ –ª–∏—á–Ω—ã—Ö –∑–∞–¥–∞—á.\n\n"
#         f"–í–µ–±–∏–Ω–∞—Ä –ø—Ä–æ–π–¥—ë—Ç —Å–µ–≥–æ–¥–Ω—è:\n"
#         f"{config.WEBINAR_TIME.strftime('%d.%m.%Y –≤ %H:%M')} –í–∞—Ä—à–∞–≤–∞ | "
#         f"{(config.WEBINAR_TIME + timedelta(hours=1)).strftime('%H:%M')} –ö–∏–µ–≤.\n\n"
#         "–ù–∏–∫–∞–∫–æ–π –ª–∏—à–Ω–µ–π —Ç–µ–æ—Ä–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ–º–æ–≥—É—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –≤—Ä–µ–º—è –∏ —Ä–µ—Å—É—Ä—Å—ã. –í—ã —É–∑–Ω–∞–µ—Ç–µ:\n\n"
#         "‚úÖ –ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n"
#         "‚úÖ –ö–∞–∫–∏–µ –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–æ–º–æ–≥—É—Ç –≤ —Ä–∞–±–æ—Ç–µ –∏ –∂–∏–∑–Ω–∏\n"
#         "‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—é –≤ —Å–≤–æ–∏—Ö –∫–æ–º–ø–∞–Ω–∏—è—Ö\n\n"
#         "–ù–∞–∂–º–∏—Ç–µ ¬´–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫ üéÅ ‚Äî 30-–º–∏–Ω—É—Ç–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫:\n"
#         "¬´–ö–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —é—Ä–∏—Å—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò¬ª"
#     )
#     await message.answer(welcome_text, reply_markup=register_kb)
#
# @router.callback_query(F.data == "register")
# async def on_register(callback_query: types.CallbackQuery):
#     user_id = callback_query.from_user.id
#     username = callback_query.from_user.username
#     at = datetime.now(timezone.utc)
#
#     await MetodSQL.add(user_id, username, at=at)
#
#     await schedule_reminders(user_id)
#
#     await callback_query.message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä! –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –Ω–∞—á–∞–ª–µ.")
#     await callback_query.answer()
#
#
# from datetime import datetime, timedelta, timezone
#
#
# async def schedule_reminders(user_id: int):
#     kyiv_tz = pytz.timezone("Europe/Kyiv")
#
#     now = datetime.now(kyiv_tz)
#     from config.config import WEBINAR_TIME
#
#     reminder_30min = WEBINAR_TIME - timedelta(minutes=30)
#     print(f"30minut  {reminder_30min}")
#     reminder_30min = reminder_30min.replace(tzinfo=kyiv_tz)
#     if reminder_30min > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(reminder_30min),
#             args=(user_id, "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –Ω–∞—á–Ω–µ—Ç—Å—è –≤–µ–±–∏–Ω–∞—Ä ¬´–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–π —Ä—É—Ç–∏–Ω—É —Å –ò–ò¬ª!"),
#         )
#
#     reminder_5min = WEBINAR_TIME - timedelta(minutes=5)
#     print(f"5 minut {reminder_5min}")
#     reminder_5min = reminder_5min.replace(tzinfo=kyiv_tz)
#     if reminder_5min > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(reminder_5min),
#             args=(user_id, "üîî –í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç! –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!"),
#         )
#
#     WEBINAR_TIME = WEBINAR_TIME.replace(tzinfo=kyiv_tz)
#     if WEBINAR_TIME > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(WEBINAR_TIME),
#             args=(user_id, "üöÄ –í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å!"),
#         )
#
#     reminder_90min_after = WEBINAR_TIME + timedelta(minutes=90)
#     print(reminder_5min)
#     reminder_90min_after = reminder_90min_after.replace(tzinfo=kyiv_tz)
#
#     if reminder_90min_after > now:
#         scheduler.add_job(
#             send_reminder,
#             DateTrigger(reminder_90min_after),
#             args=(user_id, "üìö –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –≤–µ–±–∏–Ω–∞—Ä–µ! –í–æ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–∞–ø–∏—Å—å..."),
#         )
#
# async def send_reminder(user_id: int, message: str):
#     try:
#         await bot.send_message(user_id, message)
#     except Exception as e:
#         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
#
#
# async def on_startup():
#     scheduler.start()
#
#     users = await MetodSQL.get_all_users()
#     for user in users:
#         await schedule_reminders(user['user_id'])
#
#
# async def main_context():
#     await on_startup()
#     await dp.start_polling(bot)
#
#
# if __name__ == "__main__":
#     asyncio.run(main_context())
